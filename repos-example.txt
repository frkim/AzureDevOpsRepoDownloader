# ================================================================
# Azure DevOps Repository List - Example File
# ================================================================
# 
# This file contains a list of Azure DevOps repository URLs.
# One URL per line. Empty lines and lines starting with # are ignored.
#
# ‚ö†Ô∏è IMPORTANT: URL Format Guidelines
# ===================================
# 
# ‚úÖ RECOMMENDED FORMAT (Works with ALL methods):
#   https://dev.azure.com/{organization}/{project}/_git/{repository}
#   Example: https://dev.azure.com/myorg/myproject/_git/myrepo
#
# ‚ùå AVOID THIS FORMAT (Causes issues with Git and Azure CLI methods):
#   https://username@dev.azure.com/{organization}/{project}/_git/{repository}
#   Example: https://user@dev.azure.com/myorg/myproject/_git/myrepo
#   Note: Only REST API method accepts URLs with username@ prefix
#
# üìã How to Get the Correct URL from Azure DevOps:
# =================================================
# 
# Method 1: From Repository Page (RECOMMENDED)
# ---------------------------------------------
# 1. Open Azure DevOps in your browser
# 2. Navigate to: Repos > Files
# 3. Click the "Clone" button (top right)
# 4. Copy the HTTPS URL shown
# 5. ‚ö†Ô∏è REMOVE any "username@" prefix if present
#    Change: https://user@dev.azure.com/org/proj/_git/repo
#    To:     https://dev.azure.com/org/proj/_git/repo
#
# Method 2: From Repository List
# -------------------------------
# 1. Go to: Organization > Project > Repos > Repositories
# 2. Click on repository name
# 3. Look at browser address bar
# 4. Copy URL and change format:
#    From: https://dev.azure.com/org/proj/_git/repo?path=...
#    To:   https://dev.azure.com/org/proj/_git/repo
#
# Method 3: Manual Construction
# ------------------------------
# Format: https://dev.azure.com/{org}/{project}/_git/{repo}
# Example: https://dev.azure.com/contoso/WebApp/_git/frontend
#
# üìù Supported Formats:
# =====================
# Modern:  https://dev.azure.com/{organization}/{project}/_git/{repository}
# Legacy:  https://{organization}.visualstudio.com/{project}/_git/{repository}
#
# üîß Usage:
# =========
#   .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -PersonalAccessToken "your-pat"
#
# ================================================================

# ================== CORRECT FORMAT EXAMPLES =====================
# ‚úÖ Use these formats - they work with ALL download methods
# (Git Clone, REST API, and Azure CLI)

# Production repositories
https://dev.azure.com/myorganization/MyProductionProject/_git/WebApplication
https://dev.azure.com/myorganization/MyProductionProject/_git/APIService
https://dev.azure.com/myorganization/MyProductionProject/_git/DatabaseScripts

# Development repositories
https://dev.azure.com/myorganization/MyDevProject/_git/ExperimentalFeatures
https://dev.azure.com/myorganization/MyDevProject/_git/TestAutomation

# Infrastructure repositories
https://dev.azure.com/myorganization/Infrastructure/_git/TerraformScripts
https://dev.azure.com/myorganization/Infrastructure/_git/AnsiblePlaybooks

# Legacy format (still supported)
https://myorganization.visualstudio.com/LegacyProject/_git/OldRepository

# Multiple organizations in one file
https://dev.azure.com/contoso/WebApp/_git/Frontend
https://dev.azure.com/fabricam/MobileApp/_git/iOS
https://dev.azure.com/adventureworks/DataPlatform/_git/ETLPipelines


# ================== INCORRECT FORMAT EXAMPLES ===================
# ‚ùå DO NOT USE - These formats cause errors with Git and Azure CLI
# (Only REST API method accepts these)

# Wrong: URL with username prefix
# https://john.doe@dev.azure.com/myorganization/MyProject/_git/MyRepo

# Wrong: URL with email prefix  
# https://john.doe%40company.com@dev.azure.com/myorganization/MyProject/_git/MyRepo

# ‚ö†Ô∏è If your Azure DevOps clone button shows URLs with username@:
#    Simply remove the username@ part before adding to this file
#    OR use -Method "RestAPI" which accepts both formats

# ================== DOWNLOAD METHOD COMPARISON ==================
#
# Choose the right method for your needs:
#
# Git Clone (Default) - RECOMMENDED
#   ‚úÖ Full git history, fastest, works offline
#   ‚úÖ Best for: Development work
#   ‚ö†Ô∏è Requires: Clean URLs (no username@ prefix)
#   Command: .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -PersonalAccessToken "your-pat"
#
# REST API - SIMPLEST
#   ‚úÖ No Git installation needed, smallest download
#   ‚úÖ Best for: Quick snapshots, systems without Git
#   ‚úÖ Accepts: URLs with or without username@ prefix
#   Command: .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -Method "RestAPI" -PersonalAccessToken "your-pat"
#
# Azure CLI
#   ‚úÖ Azure AD integration, official Microsoft tool
#   ‚úÖ Best for: Enterprise environments with SSO
#   ‚ö†Ô∏è Requires: Azure CLI + DevOps extension, clean URLs
#   Command: .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -Method "AzureCLI" -PersonalAccessToken "your-pat"
#
# ================== MORE EXAMPLE COMMANDS =======================
#
# Download with ZIP output:
#   .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -CreateZipArchive -PersonalAccessToken "your-pat"
#
# Download with ZIP and remove .git folders:
#   .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -Method "Git" -CreateZipArchive -CleanupGitFolder -PersonalAccessToken "your-pat"
#
# Download specific branch:
#   .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -Branch "develop" -PersonalAccessToken "your-pat"
#
# Download to specific location:
#   .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -DestinationPath "C:\Projects" -PersonalAccessToken "your-pat"
#
# Use REST API if you have URLs with username prefix:
#   .\Download-ADORepositories.ps1 -RepositoryListFile "repos-with-username.txt" -Method "RestAPI" -PersonalAccessToken "your-pat"
#
# ================== TIPS & BEST PRACTICES =======================
#
# 1. ‚úÖ Organize repositories by category using comments
# 2. ‚úÖ You can have multiple projects from different organizations
# 3. ‚úÖ The script will create separate directories for each repository
# 4. ‚úÖ Repository names are used as directory names
# 5. ‚úÖ Existing directories are skipped to prevent data loss
# 6. ‚úÖ Always use clean URLs (without username@) for maximum compatibility
# 7. ‚úÖ Store your PAT in an environment variable for security:
#        $env:ADO_PAT = "your-pat-token"
#        .\Download-ADORepositories.ps1 -RepositoryListFile "repos.txt" -PersonalAccessToken $env:ADO_PAT
# 8. ‚úÖ Test with a single repository first before batch downloading
# 9. ‚úÖ Use comments (#) to temporarily disable repositories
# 10. ‚úÖ Keep this file in version control (but never commit PAT tokens!)
#
# ================== TROUBLESHOOTING =============================
#
# Problem: "Bad hostname" or "URL rejected" error
# Solution: Remove username@ prefix from your URLs
#           OR use -Method "RestAPI" instead
#
# Problem: "Directory already exists" warning
# Solution: Delete/rename existing directory or change destination path
#
# Problem: "Authentication failed"
# Solution: Verify your PAT is valid and has Code (Read) permission
#           Create PAT at: https://dev.azure.com/{org}/_usersSettings/tokens
#
# ================================================================
